{"version":3,"sources":["components/Header.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Main","state","weather","apiKey","fetchData","e","city","target","elements","value","fetch","concat","_this","then","res","json","data","setState","catch","err","alert","preventDefault","name","country","weatherCondition","weatherDescription","temperature","humidity","pressure","this","sys","main","description","Math","round","temp","onSubmit","action","type","placeholder","Component","App","components_Header","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+JAaeA,MAXf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,qBACUF,EAAAC,EAAAC,cAAA,sBAEVF,EAAAC,EAAAC,cAAA,8FCkESE,6MAvEbC,MAAQ,CACNC,QAAS,GACTC,OAAQ,sCAGVC,UAAY,SAAAC,GACV,IAAMC,EAAOD,EAAEE,OAAOC,SAASF,KAAKG,MACpCC,MAAK,wFAAAC,OACqFL,EADrF,WAAAK,OAEDC,EAAKX,MAAME,SAGZU,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJJ,EAAKK,SAAS,CACZf,QAASc,MAGZE,MAAM,SAAAC,GAAG,OAAIC,MAAM,2BAA6BD,KACnDd,EAAEgB,0FAIF,IAAIC,EAAO,GACTC,EAAU,GACVC,EAAmB,GACnBC,EAAqB,GACrBC,EAAc,GACdC,EAAW,GACXC,EAAW,GAYb,MAV2B,KAAvBC,KAAK5B,MAAMC,UACboB,EAAOO,KAAK5B,MAAMC,QAAQoB,KAAO,IACjCC,EAAUM,KAAK5B,MAAMC,QAAQ4B,IAAIP,QACjCC,EAAmBK,KAAK5B,MAAMC,QAAQA,QAAQ,GAAG6B,KAAO,IACxDN,EAAqBI,KAAK5B,MAAMC,QAAQA,QAAQ,GAAG8B,YACnDN,EACEO,KAAKC,MAAML,KAAK5B,MAAMC,QAAQ6B,KAAKI,KAAO,QAAU,WACtDR,EAAWE,KAAK5B,MAAMC,QAAQ6B,KAAKJ,SAAW,IAC9CC,EAAWC,KAAK5B,MAAMC,QAAQ6B,KAAKH,SAAW,QAG9ChC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,QAAMsC,SAAUP,KAAKzB,UAAWiC,OAAO,GAAGtC,UAAU,iBAClDH,EAAAC,EAAAC,cAAA,SAAOwC,KAAK,OAAOhB,KAAK,OAAOiB,YAAY,oBAC3C3C,EAAAC,EAAAC,cAAA,yBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SACGwB,EADH,IACUC,GAEV3B,EAAAC,EAAAC,cAAA,SACG0B,EADH,IACsBC,GAEtB7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,4BADF,IAC6B4B,GAE7B9B,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,yBADF,IAC0B6B,GAE1B/B,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,yBADF,IAC0B8B,aA/DnBY,aCcJC,MAXf,WACE,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4C,EAAD,MACA9C,EAAAC,EAAAC,cAAC6C,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.1e03b7e0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>\r\n        Weather <span>Today</span>\r\n      </h1>\r\n      <p>Get the latest weather results for your city</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    weather: \"\",\r\n    apiKey: \"f2e1751f17c5b88c00e4dfeac793e96c\"\r\n  };\r\n\r\n  fetchData = e => {\r\n    const city = e.target.elements.city.value;\r\n    fetch(\r\n      `https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${\r\n        this.state.apiKey\r\n      }`\r\n    )\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.setState({\r\n          weather: data\r\n        });\r\n      })\r\n      .catch(err => alert(\"Could not fetch data: \\n\" + err));\r\n    e.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    let name = \"\",\r\n      country = \"\",\r\n      weatherCondition = \"\",\r\n      weatherDescription = \"\",\r\n      temperature = \"\",\r\n      humidity = \"\",\r\n      pressure = \"\";\r\n\r\n    if (this.state.weather !== \"\") {\r\n      name = this.state.weather.name + \",\";\r\n      country = this.state.weather.sys.country;\r\n      weatherCondition = this.state.weather.weather[0].main + \",\";\r\n      weatherDescription = this.state.weather.weather[0].description;\r\n      temperature =\r\n        Math.round(this.state.weather.main.temp - 273.15) + \" celcius\";\r\n      humidity = this.state.weather.main.humidity + \"%\";\r\n      pressure = this.state.weather.main.pressure + \" hPa\";\r\n    }\r\n    return (\r\n      <div className=\"display\">\r\n        <form onSubmit={this.fetchData} action=\"\" className=\"display__form\">\r\n          <input type=\"text\" name=\"city\" placeholder=\"Enter city name\" />\r\n          <button>Search</button>\r\n        </form>\r\n        <div className=\"display__weather\">\r\n          <p>\r\n            {name} {country}\r\n          </p>\r\n          <p>\r\n            {weatherCondition} {weatherDescription}\r\n          </p>\r\n          <div className=\"display__weather__results\">\r\n            <p>\r\n              <span>Temperature:</span> {temperature}\r\n            </p>\r\n            <p>\r\n              <span>Humidity:</span> {humidity}\r\n            </p>\r\n            <p>\r\n              <span>Pressure:</span> {pressure}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"app\">\n        <Header />\n        <Main />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}